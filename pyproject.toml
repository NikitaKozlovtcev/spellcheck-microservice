[tool.poetry]
name = "spellcheck-microservice"
version = "4.0.0"
description = "Microservice for spellchecking"
authors = ["Denis Anikin <ad@xfenix.ru>"]
license = "MIT"

[tool.poetry.dependencies]
python = "^3.10"
gunicorn = "*"
uvicorn = "*"
pyenchant = "*"
toml = "*"
pylru = "*"
aiopath = "*"
anyio = "*"
sentry-sdk = "*"
pydantic-settings = "*"
fastapi = "*"
structlog = "^23.2.0"

[tool.poetry.group.dev.dependencies]
httpx = "*"
pytest = "*"
pytest-cov = "*"
pytest-xdist = "*"
mypy = "*"
requests = "*"
types-requests = "*"
Faker = "*"
vulture = "*"
types-toml = "*"
pytest-repeat = "*"
ruff = "*"
black = "*"

[tool.black]
line-length = 120

[tool.ruff]
line-length = 120
fix = true
select = ["ALL"]
ignore = ["D1", "D203", "D213", "FA102", "ANN101"]
cache-dir = "/tmp/ruff-cache/"

[tool.ruff.isort]
lines-after-imports = 2
no-lines-before = ["standard-library", "local-folder"]
known-third-party = []
known-local-folder = ["whole_app"]

[tool.ruff.extend-per-file-ignores]
"tests/*.py" = [
    "ANN001",
    "ANN002",
    "ANN003",
    "ANN401",
    "S101",
    "PLR2004",
    "S311",
]
"tests/_fixtures.py" = ["E501"]

[tool.mypy]
plugins = "pydantic.mypy"
ignore_missing_imports = true
strict = true

[tool.vulture]
exclude = ["whole_app/settings.py"]

[tool.pytest.ini_options]
addopts = "--cov . --cov-report term-missing"

[tool.coverage.report]
exclude_also = [
    "if typing.TYPE_CHECKING",
]

[tool.coverage.run]
omit = ["scripts/*"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
